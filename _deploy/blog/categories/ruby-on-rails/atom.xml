<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Syntax]]></title>
  <link href="http://ershad.github.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://ershad.github.com/"/>
  <updated>2012-07-29T23:00:35+05:30</updated>
  <id>http://ershad.github.com/</id>
  <author>
    <name><![CDATA[Ershad K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Releasing myfest.in - A web app to find and share campus fest and events!]]></title>
    <link href="http://ershad.github.com/blog/2012/05/31/releasing-myfest-in-a-web-app-to-find-and-share-campus-fest-and-events/"/>
    <updated>2012-05-31T21:41:44+05:30</updated>
    <id>http://ershad.github.com/blog/2012/05/31/releasing-myfest-in-a-web-app-to-find-and-share-campus-fest-and-events</id>
    <content type="html"><![CDATA[<p><a href="http://myfest.in"><img src="http://ershadk.com/blog/wp-content/uploads/2012/05/myfest.png" alt="" /></a>I'm very happy to release my little hobby project <a href="http://myfest.in">myfest.in</a>, a place where you can find and share campus fests across India.The backend is written in ruby using Ruby on Rails framework and I've been having a nice time developing it for the last few weekends :)</p>

<p>The initial spark to build it was from the experience thatI've been going to campus fests in Kerala and realized the necessity for a simpler way of sharing the information regarding fests. Many times I've seen students from other states (like from Rajasthan and Haryana) attending the fests in Kerala and I wondered how they got the necessary information. Most of them told they either got a personal invitation or came to know about fest from some website. I thought about the thousands of students who were missing the opportunities because they didn't come to know about it on time. Also I've seen some campus fests without much of an outside participation. They were not able to promote the fest to interested students. I wanted to make a little solution for this and hence built <a href="http://myfest.in">myfest.in</a>. Thanks to <a href="http://arkarjun.wordpress.com">Arjun</a> for the <a href="http://myfest.in">myfest.in</a> logo :)</p>

<p>To those who are interested in the technologies <a href="http://myfest.in">myfest.in</a> uses: It's written in Ruby on Rails with MySQL database and a little jQuery. It runs in a dedicated VPS with nginx and passenger.</p>

<p>I hope you liked it. If you happen to find any bug, please report it to myfest@myfest.in. Thank you :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix for Rails 3.x.x error "[FATAL] failed to allocate memory" in OS X Lion]]></title>
    <link href="http://ershad.github.com/blog/2012/05/10/fix-for-rails-3-x-x-error-fatal-failed-to-allocate-memory-in-os-x-lion/"/>
    <updated>2012-05-10T10:21:46+05:30</updated>
    <id>http://ershad.github.com/blog/2012/05/10/fix-for-rails-3-x-x-error-fatal-failed-to-allocate-memory-in-os-x-lion</id>
    <content type="html"><![CDATA[<p>This error happens when mysql2 gem is either installed for some other version of mysql or when it cannot find required dynamic library. To fix this error, uninstall mysql2 gem and install as follows
[code]$ env ARCHFLAGS="-arch x86_64" gem install mysql2 -v='0.3.11' -- --with-mysql-dir=/usr/local/mysql --with-mysql-lib=/usr/local/mysql/lib --with-mysql-include=/usr/local/mysql/include --with-mysql-config=/usr/local/mysql/bin/mysql_config[/code]
Please change '/usr/local/mysql' to your mysql installation path. Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up Rails 3.2.2 with Passenger, rvm and ngnix]]></title>
    <link href="http://ershad.github.com/blog/2012/04/06/set-up-rails-3-2-2-with-passenger-rvm-and-ngnix/"/>
    <updated>2012-04-06T01:08:55+05:30</updated>
    <id>http://ershad.github.com/blog/2012/04/06/set-up-rails-3-2-2-with-passenger-rvm-and-ngnix</id>
    <content type="html"><![CDATA[<p>Ruby on Rails is becoming more feature rich and powerful by every release.Naturallythe steps to get it working in production environment are also being changed. I've been trying to set up Rails 3.2.2 for a while and here's the method that finally worked. This method should work for the new Rails release, 3.2.3 too.</p>

<p><strong>Install Server Operating System</strong></p>

<p>We have a large pool of operating systems to select for our server. Though Debian Squeeze and CentOS have proved their stability in serving rails applications, I would prefer a LTS version of Ubuntu Server edition. I did a small survey, Many experienced programmers said they are using Ubuntu server as it's easy to maintain, Packages are in plenty and has better stability.Also Canonical promises to give us 5 years of support for LTS edition operating systems. Current LTS edition is Ubuntu Server 10.04</p>

<p><strong>Install RVM</strong></p>

<p>Ruby Version Manager(RVM) helps to managemultipleruby versions in a single machine. RVM helps us to quickly switch Ruby/Rails versions. Before installing RVM, we need to install git, curl and autoconf. Use the following command to do it:</p>

<p>[code]$ sudo apt-get -y install git-core curl autoconf[/code]</p>

<p>Then install and configure RVM,</p>

<p>[code]</p>

<p>$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</p>

<p>$ echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile</p>

<p>[/code]</p>

<p>Source ~/.bash_profile to add rvm as a function to shell</p>

<p>[code]$ source ~/.bash_profile[/code]</p>

<p><strong>Install Ruby</strong></p>

<p>Before installing Ruby, we need to install all dependency packages. The following command lists the dependency packages.</p>

<p>[code]$ rvm requirements [/code]</p>

<p>We can see a line with lots of package names, something like the following. Execute it directly with sudo in shell to install packages:</p>

<p>[code]</p>

<p>sudo /usr/bin/apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion[/code]</p>

<p>Next step is to install Ruby.Current latest version of Ruby 1.9.3. Let's install it</p>

<p>[code]$ rvm install 1.9.3[/code]</p>

<p>It will take a few minutes to fetch source, configure and compile.</p>

<p>After completing installation, we can set 1.9.3 as the default version:</p>

<p>[code]$rvm use 1.9.3 --default[/code]</p>

<p><strong>Install passenger</strong></p>

<p>Passenger is a free module for Apache and nginx to run Ruby applications. Luckily it's available as a Ruby gem and it's easy to install and configure it.</p>

<p>Install passenger gem</p>

<p>[code]$ gem install passenger[/code]</p>

<p>Install and configure nginx</p>

<p>[code]$ rvmsudo passenger-install-nginx-module[/code]</p>

<p>This command downloads nginx source code, builds it and finally configures passenger for us. Default location of ngnix is /opt/nginx and we can find the configuration in /opt/nginx/conf/nginx.conf</p>

<p>If you open nginx configuration, you can see the following lines have been already added into it in 'http' configuration:</p>

<p>[code]</p>

<p>passenger_root /home/ershad/.rvm/gems/ruby-1.9.3-p125/gems/passenger-3.0.11;
passenger_ruby /home/ershad/.rvm/wrappers/ruby-1.9.3-p125/ruby;</p>

<p>[/code]</p>

<p><strong>Install Rails</strong></p>

<p>Before installing rails, we will create a gemset. Gemset is feature of RVM where we can create multiple gemset to store different gems of different versions.</p>

<p>Let's create a gemset for Rails 3.2.2</p>

<p>[code]</p>

<p>$ rvm gemset create rails322</p>

<p>$ rvm gemset use rails322</p>

<p>[/code]</p>

<p>Installing rails is pretty straight forward.</p>

<p>[code]$ gem install rails -v 3.2.2[/code]</p>

<p>If you are not interested in the documentation that comes along with rails gem, use the following command instead</p>

<p>[code]$ gem install rails -v 3.2.2--no-ri --no-rdoc [/code]</p>

<p><strong>Install nginx init script</strong></p>

<p>nginx init script by Jason Giedymin helps us to administerweb server easily.</p>

<p>[code]
$ cd
$ git clone git://github.com/jnstq/rails-nginx-passenger-ubuntu.git
$ sudo mv rails-nginx-passenger-ubuntu/nginx/nginx /etc/init.d/nginx
$ sudo chown root:root /etc/init.d/nginx
[/code]</p>

<p><strong>Deploying application</strong>
Let's store all rails applications under /var/rails_apps/ directory. Let's make such a folder
[code]
$ sudo mkdir -p /var/rails_apps
$ sudo chmod 777 /var/rails_apps/ #giving full file permissions
[/code]
Let's create a sample rails application in rails_apps directory
[code]
$ cd /var/rails_apps
$ rails new helloworld
$ cd helloworld
$ vim Gemfile # and uncomment the line to include 'therubyracer' gem. We need a javascript runtime
$ bundle install
$ bundle exec rake assets:precompile #Precompile assets to public/ dir</p>

<p>[/code]
Next step is point ngnix to this location. Add the following snippet in /opt/nginx/conf/nginx.conf
[code]</p>

<p>server {
listen 80;
server_name example.com;
rails_env production;
root /var/rails_apps/helloworld/public; # &lt;--- be sure to point to 'public'!
passenger_enabled on;
}</p>

<p>[/code]</p>

<p>Restart the server</p>

<p>[code] sudo /etc/init.d/nginx restart[/code]</p>

<p>Your application must be alive and running now! :)</p>

<p><strong>Points to remember</strong></p>

<p>1) Rails application doesn't get updated when we change the code. This is because we need to restart passengerexplicitly</p>

<p>Restarting passenger is easy, we just have to create a file 'restart.txt' in tmp/ dir of the application. For example</p>

<p>[code]</p>

<p>$ cd /var/rails_apps/helloworld</p>

<p>$ touch tmp/restart.txt</p>

<p>[/code]</p>

<p>2) Always precompile assets after generating controller or scaffold</p>

<p>3) Make sure you are migrating in 'production' environment. This can be done using the following command.</p>

<p>[code] rake db:migrate RAILS_ENV=production[/code]</p>

<p>4) When you get errors related to routes, check the list of all routes</p>

<p>[code] $ rake routes [/code]</p>

<p>5) When something goes wrong, see log/production.log</p>

<p>6) If you happen to get passenger errors related to missing gems, just add those gems in Gemfile and use the following command</p>

<p>[code] $bundle install --path vendor/bundle [/code]</p>

<p>That's it. Happy hacking with Ruby on Rails. Thank you.</p>
]]></content>
  </entry>
  
</feed>
